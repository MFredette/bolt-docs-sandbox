<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE task PUBLIC "-//PUPPET//DTD DITA Puppet Task//EN" "task.dtd">
<task xmlns:ditaarch="http://dita.oasis-open.org/architecture/2005/" ditaarch:DITAArchVersion="1.2" domains="(topic task)                            (topic hi-d)                            (topic ut-d)                            (topic indexing-d)                              (topic pr-d)                            (topic sw-d)                            (topic ui-d)                            (topic task strictTaskbody-c)   " id="powershell_script_that_restarts_a_service" class="- topic/topic task/task "><title class="- topic/title ">Run a <ph conkeyref="ProductNames/powershell" class="- topic/ph "/> script that restarts a service</title><shortdesc class="- topic/shortdesc ">To show you how you can use Bolt to reuse your existing <ph conkeyref="ProductNames/powershell" class="- topic/ph "/> scripts, this guide walks you through running a script with <ph conkeyref="ProductNames/bolt" class="- topic/ph "/>, and then converting the script to a <ph conkeyref="ProductNames/bolt" class="- topic/ph "/> task and running that. </shortdesc><prolog class="- topic/prolog "><author translate="no" type="creator" class="- topic/author ">Claire Cadman &lt;claire.cadman@puppet.com&gt;</author></prolog><taskbody class="- topic/body task/taskbody "><prereq class="- topic/section task/prereq "><ul class="- topic/ul "><li class="- topic/li "><p class="- topic/p ">Ensure you’ve already <xref href="bolt_install_windows.dita" class="- topic/xref ">installed <ph conkeyref="ProductNames/bolt" class="- topic/ph "/> </xref> on your <ph conkeyref="ProductNames/windows" class="- topic/ph "/> machine.</p></li><li class="- topic/li "><p class="- topic/p ">Identify a remote <ph conkeyref="ProductNames/windows" class="- topic/ph "/> node to work with. </p></li><li class="- topic/li "><p class="- topic/p ">Ensure you have <ph conkeyref="ProductNames/windows" class="- topic/ph "/> credentials for the remote node.</p></li><li class="- topic/li "><p class="- topic/p ">Ensure you have <xref href="https://docs.microsoft.com/en-us/windows/desktop/winrm/installation-and-configuration-for-windows-remote-management" scope="external" class="- topic/xref ">configured <ph conkeyref="ProductNames/windows" class="- topic/ph "/> Remote Management</xref> on the remote node.</p></li></ul></prereq><context class="- topic/section task/context "><p class="- topic/p ">The example script, called&#160;<xref href="https://gist.github.com/RandomNoun7/03dfb910e5d93fefaae6e6c2da625c44#file-restart_service-ps1" scope="external" class="- topic/xref ">restart_service.ps1</xref>, performs common task of restarting a service on demand. The process involves these steps: </p><p class="- topic/p "> <ol class="- topic/ol "><li class="- topic/li "><p class="- topic/p ">Run your <ph conkeyref="ProductNames/powershell" class="- topic/ph "/> script on a remote <ph conkeyref="ProductNames/windows" class="- topic/ph "/> node.</p></li><li class="- topic/li "><p class="- topic/p ">Create an inventory file to store information about the node.</p></li><li class="- topic/li "><p class="- topic/p ">Convert your script to a task.</p></li><li class="- topic/li "><p class="- topic/p ">Execute your new task.</p></li></ol> </p></context><steps class="- topic/ol task/steps "><step class="- topic/li task/step "> <cmd class="- topic/ph task/cmd ">Run your <ph conkeyref="ProductNames/powershell" class="- topic/ph "/> script on a remote <ph conkeyref="ProductNames/windows" class="- topic/ph "/> node.</cmd> <info class="- topic/itemgroup task/info "><p class="- topic/p ">First, we’ll use <ph conkeyref="ProductNames/bolt" class="- topic/ph "/> to run the script as-is on a single target node.</p></info> <substeps class="- topic/ol task/substeps "><substep class="- topic/li task/substep "> <cmd class="- topic/ph task/cmd ">Create a <ph conkeyref="ProductNames/bolt" class="- topic/ph "/> project directory to work in, called <codeph translate="no" class="+ topic/ph pr-d/codeph ">bolt-guide</codeph>.</cmd> </substep><substep class="- topic/li task/substep "> <cmd class="- topic/ph task/cmd ">Copy the <xref href="https://gist.github.com/RandomNoun7/03dfb910e5d93fefaae6e6c2da625c44#file-restart_service-ps1" scope="external" class="- topic/xref "> <codeph translate="no" class="+ topic/ph pr-d/codeph ">restart_service.ps1</codeph> </xref> script into <codeph translate="no" class="+ topic/ph pr-d/codeph ">bolt-guide</codeph>.</cmd> </substep><substep class="- topic/li task/substep "> <cmd class="- topic/ph task/cmd ">In the <codeph translate="no" class="+ topic/ph pr-d/codeph ">bolt-guide</codeph> directory, run the <codeph translate="no" class="+ topic/ph pr-d/codeph ">restart_service.ps1</codeph> script with the following command: </cmd> <info class="- topic/itemgroup task/info "><codeblock translate="no" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">bolt script run .\restart_service.ps1 service=W32Time --nodes winrm://m2zqwc1bcgman2b -u Administrator -p </codeblock><p class="- topic/p "> <image placement="inline" href="Bolt___PS_1.png" class="- topic/image "/> </p><note class="- topic/note ">The <codeph translate="no" class="+ topic/ph pr-d/codeph ">-p</codeph> option prompts you to enter a password.</note><p class="- topic/p ">By running this command, you’ve brought your script under <ph conkeyref="ProductNames/bolt" class="- topic/ph "/> control and have run it on a remote node. When you ran your script with <ph conkeyref="ProductNames/bolt" class="- topic/ph "/>, the script was transferred into a temporary directory on the remote node, it ran on that node, and then it was deleted from the node.</p></info> </substep></substeps> </step><step class="- topic/li task/step "> <cmd class="- topic/ph task/cmd ">Create an inventory file to store information about your nodes.</cmd> <info class="- topic/itemgroup task/info "><p class="- topic/p ">To run <ph conkeyref="ProductNames/bolt" class="- topic/ph "/> commands against multiple nodes at once, you need to provide information about the environment by creating an <xref href="inventory_file.dita" class="- topic/xref ">inventory file</xref>. The inventory file is a YAML file that contains a list of target nodes and node specific data. </p></info> <substeps class="- topic/ol task/substeps "><substep class="- topic/li task/substep "> <cmd class="- topic/ph task/cmd ">Inside the <codeph translate="no" class="+ topic/ph pr-d/codeph ">bolt-guide</codeph> directory, use a text editor to create an <codeph translate="no" class="+ topic/ph pr-d/codeph ">inventory.yaml</codeph> file.</cmd> </substep><substep class="- topic/li task/substep "> <cmd class="- topic/ph task/cmd ">Inside the new <codeph translate="no" class="+ topic/ph pr-d/codeph ">inventory.yaml</codeph> file, add the following content, listing the fully qualified domain names of the target nodes you want to run the script on, and replacing the credentials in the <codeph translate="no" class="+ topic/ph pr-d/codeph ">winrm</codeph> section with those appropriate for your node: </cmd> <info class="- topic/itemgroup task/info "><codeblock translate="no" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">groups:
  - name: windows
    nodes:
      - &lt;ADD WINDOWS SERVERS FQDN&gt;
      - &lt;example.mycompany.com&gt;
    config:
      transport: winrm
      winrm:
        user: Administrator
        Password: &lt;ADD PASSWORD&gt;</codeblock><note class="- topic/note ">To have <ph conkeyref="ProductNames/bolt" class="- topic/ph "/> securely prompt for a password, use the <codeph translate="no" class="+ topic/ph pr-d/codeph ">--password</codeph> or <codeph translate="no" class="+ topic/ph pr-d/codeph ">-p</codeph> flag without supplying any value. <ph conkeyref="ProductNames/bolt" class="- topic/ph "/> then prompts for the password, so that it does not appear in a process listing or on the console. Alternatively you can use the <xref href="inventory_file_v2.dita" class="- topic/xref "> <codeph translate="no" class="+ topic/ph pr-d/codeph "> <codeph translate="no" class="+ topic/ph pr-d/codeph ">prompt</codeph> plugin</codeph> </xref> to set configuration values via a prompt</note><p class="- topic/p ">You now have an inventory file where you can store information about your nodes. </p><p class="- topic/p ">You can also configure a variety of options for <ph conkeyref="ProductNames/bolt" class="- topic/ph "/> in bolt.yaml file, including global and transport options. For more information, see <xref href="bolt_configuration_options.dita" class="- topic/xref ">Bolt configuration options</xref>.</p></info> </substep></substeps> </step><step class="- topic/li task/step "> <cmd class="- topic/ph task/cmd ">Convert your script to a <ph conkeyref="ProductNames/bolt" class="- topic/ph "/> task. </cmd> <info class="- topic/itemgroup task/info "><p class="- topic/p ">To convert the <codeph translate="no" class="+ topic/ph pr-d/codeph ">restart_service.ps1</codeph> script to a task, giving you the ability to reuse and share it, you create a <xref href="task_metadata.dita" class="- topic/xref ">task metadata</xref> file. Task metadata files describe task parameters, validate input, and control how the task runner executes the task.</p><p class="- topic/p "> <note type="note" class="- topic/note ">This guide shows you how to convert the script to a task by manually creating the <codeph translate="no" class="+ topic/ph pr-d/codeph ">.ps1</codeph> file in a directory called <codeph translate="no" class="+ topic/ph pr-d/codeph ">tasks</codeph>. Alternatively, you can use <ph conkeyref="ProductNames/pdk_long" class="- topic/ph "/> (<ph conkeyref="ProductNames/pdk" class="- topic/ph "/>), to create a new task by using &#160;the <codeph translate="no" class="+ topic/ph pr-d/codeph "> <xref href="https://puppet.com/docs/pdk/1.x/pdk_reference.html#pdk-new-task-command" scope="external" class="- topic/xref ">pdk new task command</xref> </codeph>. If you’re going to be creating a lot of tasks, using <ph conkeyref="ProductNames/pdk" class="- topic/ph "/> is worth getting to know. For more information, see the <ph conkeyref="ProductNames/pdk" class="- topic/ph "/> <xref href="https://puppet.com/docs/pdk/1.x/pdk_overview.html" scope="external" class="- topic/xref "> <ph conkeyref="ProductNames/pdk" class="- topic/ph "/> documentation.</xref> </note> </p></info> <substeps class="- topic/ol task/substeps "><substep class="- topic/li task/substep "> <cmd class="- topic/ph task/cmd ">In the <codeph translate="no" class="+ topic/ph pr-d/codeph ">bolt-guide</codeph> directory, create the following subdirectories:</cmd> <info class="- topic/itemgroup task/info "><p class="- topic/p "> <codeblock translate="no" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">bolt-guide/
└── modules
    └── gsg
        └── tasks</codeblock> </p></info> </substep><substep class="- topic/li task/substep "> <cmd class="- topic/ph task/cmd ">Move the <codeph translate="no" class="+ topic/ph pr-d/codeph ">restart_service.ps1</codeph> script into the <codeph translate="no" class="+ topic/ph pr-d/codeph ">tasks</codeph> directory.</cmd> </substep><substep class="- topic/li task/substep "> <cmd class="- topic/ph task/cmd ">In the&#160;<codeph translate="no" class="+ topic/ph pr-d/codeph ">tasks</codeph> directory, use your text editor to create a task metadata file — named after the script, but with a <codeph translate="no" class="+ topic/ph pr-d/codeph ">.json</codeph> extension, in this example, <codeph translate="no" class="+ topic/ph pr-d/codeph ">restart_service.json</codeph>.</cmd> </substep><substep class="- topic/li task/substep "> <cmd class="- topic/ph task/cmd ">Add the following content to the new task metadata file:</cmd> <info class="- topic/itemgroup task/info "><p class="- topic/p "> <codeblock translate="no" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">{
  "puppet_task_version": 1,
  "supports_noop": false,
  "description": "Stop or restart a service or list of services on a node.",
  "parameters": {
    "service": {
      "description": "The name of the service, or a list of service names to stop.",
      "type": "Variant[Array[String],String]"
    },
    "norestart": {
      "description": "Immediately restart the services after start.",
      "type": "Optional[Boolean]"
    }
  }
}</codeblock> </p></info> </substep><substep class="- topic/li task/substep "> <cmd class="- topic/ph task/cmd ">Save the task metadata file and navigate back to the <codeph translate="no" class="+ topic/ph pr-d/codeph ">bolt-guide</codeph> directory.</cmd> <info class="- topic/itemgroup task/info "><p class="- topic/p ">You now have two files in the <codeph translate="no" class="+ topic/ph pr-d/codeph ">gsg</codeph> module’s <codeph translate="no" class="+ topic/ph pr-d/codeph ">tasks</codeph> directory: <codeph translate="no" class="+ topic/ph pr-d/codeph ">restart_service.ps1</codeph> and <codeph translate="no" class="+ topic/ph pr-d/codeph ">restart_service.json</codeph> -- the script is officially converted to a Bolt task. Now that it’s converted, you no longer need to specify the file extension when you call it from a Bolt command.</p></info> </substep><substep class="- topic/li task/substep "> <cmd class="- topic/ph task/cmd ">To validate that <ph conkeyref="ProductNames/bolt" class="- topic/ph "/> recognizes the script as a task, run the following command:</cmd> <info class="- topic/itemgroup task/info "><p class="- topic/p "> <codeblock translate="no" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">bolt task show gsg::restart_service</codeblock> <image placement="inline" href="bolt_PS_2.png" class="- topic/image "/> </p><p class="- topic/p ">Congratulations! You’ve successfully converted the <codeph translate="no" class="+ topic/ph pr-d/codeph ">restart_service.ps1</codeph> script to a <ph conkeyref="ProductNames/bolt" class="- topic/ph "/> task.</p></info> </substep></substeps> </step><step class="- topic/li task/step "> <cmd class="- topic/ph task/cmd ">Execute your new task </cmd> <substeps class="- topic/ol task/substeps "><substep class="- topic/li task/substep "> <cmd class="- topic/ph task/cmd ">To execute your new task, run the following command:</cmd> <info class="- topic/itemgroup task/info "><p class="- topic/p "> <codeblock translate="no" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">bolt task run gsg::restard_service service=W32Time --nodes windows</codeblock> <image placement="inline" href="bolt_PS_3.png" class="- topic/image "/> <note type="note" class="- topic/note "> <codeph translate="no" class="+ topic/ph pr-d/codeph ">--nodes windows</codeph> refers to the name of the group of target nodes that you specified in your inventory file. For more information, see <xref href="bolt_options.dita" class="- topic/xref ">Specify target nodes</xref>. </note> </p></info> </substep></substeps> </step></steps></taskbody></task>
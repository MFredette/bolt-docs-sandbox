<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//PUPPET//DTD DITA Puppet Concept//EN" "concept.dtd">
<concept id="passing-structured-data" class="- topic/topic concept/concept "><title class="- topic/title ">Passing structured data</title><shortdesc class="- topic/shortdesc ">If one of your task or plan parameters accept structured data like an <codeph class="+ topic/ph pr-d/codeph ">array</codeph> or <codeph class="+ topic/ph pr-d/codeph ">hash</codeph>, it can be passed as JSON from the command line.</shortdesc><prolog class="- topic/prolog "><author translate="no" type="creator" class="- topic/author ">Melissa Amos &lt;melissa.amos@puppet.com&gt;</author></prolog><conbody class="- topic/body  concept/conbody "><p class="- topic/p ">If a single parameter can be parsed as JSON and the parsed value matches the
parameter's type specification in the task metadata or plan definition, it can be passed with
<codeph class="+ topic/ph pr-d/codeph ">&lt;&gt;param=value</codeph> syntax. Make sure to wrap the JSON value in single quotes to
prevent <codeph class="+ topic/ph pr-d/codeph ">"</codeph> characters from being swallowed by the shell.

         

         <codeblock class="+ topic/pre pr-d/codeblock ">bolt task run mymodule::mytask --nodes app1.myorg.com load_balancers='["lb1.myorg.com", "lb2.myorg.com"]'</codeblock><codeblock class="+ topic/pre pr-d/codeblock ">bolt plan run mymodule::myplan load_balancers='["lb1.myorg.com", "lb2.myorg.com"]'</codeblock></p><p class="- topic/p ">If you want to pass multiple structured values or are having trouble with the magic parsing of single parameters, you can pass a single JSON object for all parameters with the <codeph class="+ topic/ph pr-d/codeph ">--params</codeph> flag.
     <codeblock class="+ topic/pre pr-d/codeblock ">bolt task run mymodule::mytask --nodes app1.myorg.com --params '{"load_balancers": ["lb1.myorg.com", "lb2.myorg.com"]}'</codeblock><codeblock class="+ topic/pre pr-d/codeblock ">bolt plan run mymodule::myplan --params '{"load_balancers": ["lb1.myorg.com", "lb2.myorg.com"]}'</codeblock></p><p class="- topic/p ">You can also load parameters from a file by putting <codeph class="+ topic/ph pr-d/codeph ">@</codeph> before the file name.<codeblock outputclass="no-highlight" class="+ topic/pre pr-d/codeblock ">bolt task run mymodule::mytask --nodes app1.myorg.com --params @param_file.json</codeblock><codeblock outputclass="no-highlight" class="+ topic/pre pr-d/codeblock ">bolt plan run mymodule::myplan --params @param_file.json</codeblock></p><p class="- topic/p ">To pass JSON values in <ph conkeyref="ProductNames/powershell" class="- topic/ph "/> without worrying about escaping, use <codeph class="+ topic/ph pr-d/codeph ">ConvertTo-Json</codeph><codeblock class="+ topic/pre pr-d/codeblock ">bolt task run mymodule::mytask --nodes app1.myorg.com --params $(@{load_balancers=@("lb1.myorg.com","lb2.myorg.com")} | ConvertTo-Json)</codeblock><codeblock class="+ topic/pre pr-d/codeblock ">bolt plan run mymodule::myplan --nodes app1.myorg.com --params $(@{load_balancers=@("lb1.myorg.com","lb2.myorg.com")} | ConvertTo-Json)</codeblock></p></conbody></concept>
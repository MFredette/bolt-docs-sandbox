<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//PUPPET//DTD DITA Puppet Concept//EN" "concept.dtd">
<concept id="converting-yaml-plans-to-puppet-plans" class="- topic/topic concept/concept "><title class="- topic/title ">Converting YAML plans to Puppet plans</title><shortdesc class="- topic/shortdesc ">You can convert a YAML plan to a <ph conkeyref="ProductNames/puppet" class="- topic/ph "/> plan with the <codeph class="+ topic/ph pr-d/codeph ">bolt plan convert</codeph> command.</shortdesc><prolog class="- topic/prolog "><author translate="no" type="creator" class="- topic/author ">Melissa Amos &lt;melissa.amos@puppet.com&gt;</author></prolog><conbody class="- topic/body  concept/conbody "><p class="- topic/p ">
            <codeblock class="+ topic/pre pr-d/codeblock ">bolt plan convert path/to/my/plan.yaml</codeblock>
        </p><p class="- topic/p ">This command takes the relative or absolute path to the YAML plan to be converted and prints the converted <ph conkeyref="ProductNames/puppet" class="- topic/ph "/> plan to stdout.</p><p class="- topic/p ">
            <note class="- topic/note ">Converting a YAML plan might result in a <ph conkeyref="ProductNames/puppet" class="- topic/ph "/> plan which is syntactically correct, but behaviorally different from its YAML plan. Always manually verify a converted <ph conkeyref="ProductNames/puppet" class="- topic/ph "/> plan's functionality. If you convert a YAML plan to <ph conkeyref="ProductNames/puppet" class="- topic/ph "/> and it doesn't have the same behavior as the YAML plan, you can 
                <xref href="https://github.com/puppetlabs/bolt/issues" scope="external" class="- topic/xref ">file an issue in our </xref><ph conkeyref="ProductNames/git" class="- topic/ph "/>
                <xref class="- topic/xref "> repo</xref>.
            </note>
        </p><p class="- topic/p ">For example, with this YAML plan:<codeblock class="+ topic/pre pr-d/codeblock "># site-modules/mymodule/plans/yamlplan.yaml
parameters:
  nodes:
    type: TargetSpec
steps:
  - name: run_task
    task: sample
    target: $nodes
    parameters:
      message: "hello world"
return: $run_task</codeblock></p><p class="- topic/p ">Run the following conversion:<codeblock class="+ topic/pre pr-d/codeblock ">$ bolt plan convert site-modules/mymodule/plans/yamlplan.yaml
# WARNING: This is an autogenerated plan. It may not behave as expected.
plan mymodule::yamlplan(
  TargetSpec $nodes
) {
  $run_task = run_task('sample', $nodes, {'message' =&gt; "hello world"})
  return $run_task
}</codeblock></p></conbody></concept>
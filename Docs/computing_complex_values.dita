<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd"> <concept id="computing-complex-values" class="- topic/topic concept/concept "><title class="- topic/title ">Computing complex values</title><shortdesc class="- topic/shortdesc ">To compute complex values, you can use a <ph conkeyref="ProductNames/puppet" class="- topic/ph "/> code expression as the value of any field of a step except the <codeph class="+ topic/ph pr-d/codeph ">name</codeph>.</shortdesc><prolog class="- topic/prolog "><author translate="no" type="creator" class="- topic/author ">Melissa Amos &lt;melissa.amos@puppet.com&gt;</author></prolog><conbody class="- topic/body  concept/conbody "><p class="- topic/p "><ph conkeyref="ProductNames/bolt" class="- topic/ph "/> loads the plan as a YAML data structure. As it executes each step, it evaluates any expressions embedded in the step. Each plan parameter and the values of every previous named step are available in scope.</p><p class="- topic/p ">This lets you take advantage of the power of Puppet language in the places it's necessary, while keeping the rest of your plan simple.</p><p class="- topic/p ">When your plans need more sophisticated control flow or error handling beyond running a list of steps in order, it's time to convert them to <xref href="writing_plans.dita#concept-7890" class="- topic/xref ">Puppet language plans</xref>.</p></conbody></concept>